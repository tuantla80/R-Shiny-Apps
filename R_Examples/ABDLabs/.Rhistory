sig_probs <- dist_list[[2]]
#####################################################################################
##RIVER NETWORK
#read csv with a simple network with nodes and distance between them (in meters)
#net <- read.csv("Test_river_network_feb4.csv", header = T)
#net <- data.frame(From = c(11,12,13,14,15),
#                  To = c(14,14,15,15,16),
#                  Distance = c(100,100,200,200,400))
net <- data.frame(From = c(13,14,15),
To = c(15,15,16),
Distance = c(100,100,100))
#using function river_network to create river stretches based on the minimum distance estimated from dispersal function (by default this is half sigma)
river_net  <- river_network(min_dist, net) #gets slow veeery fast because of the pairwise calculation
#calculating BACKWARD migration
migB <- migration(sig_probs, river_net)
##from here I will make a new function that generates the inputs for SLiM :)
## Everything is done under the assumption of symmetry.
## For assymmetric migration, migration function will have to be modified.
migB
migB[15]
(1352-921.5)^2/921.5+(491-921.5)^2/921.5
pnorm(0.3800217)
1-pnorm(0.3800217)
extData = read.csv("///Users/whitlock/Desktop/ Get to Work!/Stats Book/3rd edition/new examples/Jousimo et al paper/Data Figure5A.csv")
extData = read.csv("///Users/whitlock/Desktop/ Get to Work!/Stats Book/3rd edition/new examples/Jousimo et al paper/Data Figure5A.csv")
extData = read.csv("///Users/whitlock/Desktop/ Get to Work!/Stats Book/3rd edition/new examples/Jousimo et al paper/Data Figure5A.csv")
extData = read.csv("///Users/whitlock/Desktop/ Get to Work!/Stats Book/3rd edition/new examples/Jousimo et al paper/Data Figure 5A.csv")
summary(extData)
summ
ggplot(extData, aes(x=S, y=Ext)) + geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()+ scale_color_manual(values=c("#CC6666", "#9999CC"))
ggplot(extData, aes(x=S, y=Ext)) + geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()+ scale_color_manual(values=c("#CC6666"))
ggplot(extData, aes(x=S, y=Ext)) + geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE) + scale_color_manual(values=c("#CC6666"))+
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial", colour="#000099"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point() +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point(colour="#000099") +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point(colour="red") +
stat_smooth(method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point(colour="red") +
stat_smooth(method="glm", method.args=list(family="binomial", colour="darkblue"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point(colour="red") +
stat_smooth(colour="darkblue",method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point(colour="red") +
stat_smooth(colour="green",method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point() +
stat_smooth(colour="green",method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point() +
stat_smooth(colour="firebrick",method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point(size=2) +
stat_smooth(colour="firebrick",method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point(size=1) +
stat_smooth(colour="firebrick",method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(extData, aes(x=S, y=Ext)) + geom_point(size=0.6) +
stat_smooth(colour="firebrick",method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
extGlm <- glm(Ext ~ S, data = extData, family = binomial(link = logit))
summary(extGLM)
summary(extGlm)
library(MASS)
confint(extGlm)
dose.p(extGlm, p = 0.50)
anova(extGlm, test = "Chi")
temp = 1.96*sqrt(0.4221*(1-.4221)/244)
0.4221-temp
0.4221+temp
hist(rnorm(100))
R.Version()
hist(rnorm(100),breaks = “fd”)
hist(rnorm(100),breaks = 10)
hist(rnorm(100),breaks = 30)
library(hierfstat)
assert = function(b,s)
{
if (is.na(b))
{
stop(paste0("Assert Error (NA received)", s))
}
if (!b)
{
stop(paste0("Assert Error (FALSE received) ", s))
}
}
changeExtension = function(infilepath, newExt){
s1 <- unlist(strsplit(x=infilepath, split="\\/")) #get the filename from the path
filename <- s1[length(s1)]
s2 <- unlist(strsplit(x=filename, split="\\."))#separate extension from filename
outfile = paste(paste(s2[-length(s2)], collapse=".", sep=""), newExt, sep="")
outfilepath = paste(paste(s1[-length(s1)],collapse="/"), outfile, sep="/")
return(outfilepath)
}
computeNbGenerations = function(m, mutationRate, N)
{
x = m + mutationRate
# Calculates half life to equilibrium and multiplies it by 50
# Whitlock ref
L <- (1-x)^2*(1-1/N)
t.half <- log(1/2)/log(L)
gens <- 10*t.half
return(floor(gens))
}
computeNbGenerations(m=0.00005, mutationRate=2e-6, N =5000)
FSTcalc = function(freqs,WCcalcType="NeiFST")
{
if (WCcalcType == "WC")
{
### Assumes all pop sample size are equal
meanFreqs = mean(freqs)
Ht = 2 * meanFreqs * (1 - meanFreqs)
Hs = mean(freqs * (1 - freqs) * 2)
s2 = sum((freqs - meanFreqs)^2) / (nbDemes-1)
r_s2_expr = s2 * ((nbDemes - 1) / nbDemes)
HalfHt = Ht/2
a = s2 - 1 / (N-1) * (HalfHt - r_s2_expr - Hs / 4)
b = N / (N - 1) * (HalfHt - r_s2_expr - ((2*N - 1) * Hs) / (4*N))
c = Hs / 2
FST = a / (a+b+c)
return(c(FST, Ht))
}
if (WCcalcType == "WC_old")
{
#### I am doing some simplification here assuming N = sample size (which is the case for our data)
#### I took Katie's code as basis
#### It seems to return weird values. Incl. many negative values
meanFreqs = mean(freqs)
Ht = 2 * meanFreqs * (1 - meanFreqs)
s2 = sum((freqs - meanFreqs)^2) / (nbDemes-1)
T1 = s2   -    1 / (N-1) * (Ht/2)    -    (s2 * (nbDemes-1) / nbDemes)
T2 = (N - 1) * (Ht / 2) / (N-1)
FST = T1 / T2
return(c(FST, Ht))
}
if (WCcalcType == "NeiFST")
{
meanFreqs = mean(freqs)
Ht = 2 * meanFreqs * (1 - meanFreqs)
Hs = mean(2 * freqs * (1- freqs))
return ( c((Ht - Hs)/Ht, Ht) )
}
stop("You have to select one type of WC calculation")
}
pvalueStuff = function(EmpHt, EmpFST, SimsHt, SimsFST)
{
###############
### p.value ###
###############
pvalues = numeric(nbLoci)
for (locus in 1:nbLoci)
{
HtBinMin = EmpHt[locus] - Ht_halfBinSize
HtBinMax = EmpHt[locus] + Ht_halfBinSize
simsIndices = which(SimsHt > HtBinMin & SimsHt < HtBinMax)
if (length(simsIndices) == 0)
{
pvalues[locus] = NA
} else
{
pvalues[locus] = sum(SimsFST[simsIndices] > EmpFST[locus] ) / length(simsIndices)
}
assert(is.na(pvalues[locus]) | (pvalues[locus] >= 0 && pvalues[locus] <= 1), "is.na(pvalues[locus]) | (pvalues[locus] >= 0 && pvalues[locus] <= 1) is wrong")
}
####################
### FPR NoQvalue ###
####################
r = numeric(length(alphas))
for (alphaIndex in 1:length(alphas))
{
alpha = alphas[alphaIndex]
x = sum(pvalues < alpha) / length(pvalues)
#assert(!is.na(x), "assert !is.na(x) error")
r[alphaIndex] = x
}
##############
### qvalue ###
##############
# nothing = tryCatch(
# 	{
# 		#qpvalues = qvalue(pvalues)$qvalues
# 		qpvalues = NA
# 		for (alphaIndex in 1:length(alphas))
# 		{
# 			alpha = alphas[alphaIndex]
# 			x = sum(qpvalues < alpha) / length(pvalues)
# 			#assert(!is.na(x), "assert !is.na(x) error")
# 			d[1,colIndex + alphaIndex - 1] = x
# 		}
# 	}
# 	,
# 	warning=function(w) {print(paste("Warning '", w,"' received when running the qvalue function"))}
# 	,
# 	error=function(e) {print(paste("Error '", e,"' received when running the qvalue function"))}
# )
# colIndex = colIndex + length(alphas)
return (r)
}
ggplot(extData, aes(x=S, y=Ext)) + geom_point(size=0.6) +
stat_smooth(colour="firebrick",method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Host connectivity", y="Extinction probability" ) +
theme_classic()
extGlm <- glm(Ext ~ S, data = extData, family = binomial(link = logit))
summary(extGlm)
confint(extGlm)
dose.p(extGlm, p = 0.50)
anova(extGlm, test = "Chi")
beeData <- read.csv("/Users/whitlock/Desktop/ Get to Work!/Stats Book/3rd edition/new examples/16 17 new examples/BumblebeeClimateChange.csv")
summary(beeData)
cor(beeData$coolLimit, beeData$changeCoolLimit)
cor(beeData$coolLimit, beeData$changeCoolLimit)^2
cor.test(beeData$coolLimit, beeData$changeCoolLimit)
plot(beeData)
beeRegression <- lm(changeCoolLimit ~ coolLimit, data = beeData)
beeRegression
summary(beeRegression)
hist(residuals(beeRegression))
plot(beeData$coolLimit, residuals(beeRegression))
abline(h=0)
ggplot(beeData, aes(x=coolLimit, y=changeCoolLimit)) +
geom_point() +
theme_minimal() +
xlab("Father's ornamentation") +
ylab("Son's attractiveness")
ggplot(beeData, aes(x=coolLimit, y=changeCoolLimit)) +
geom_point() +
theme_minimal() +
xlab("Cool limit") +
ylab("Change in cool limit") +theme_classic()
ggplot(beeData, aes(x=coolLimit, y=changeCoolLimit)) +
geom_point(colour="firebrick") +
theme_minimal() +
xlab("Cool limit") +
ylab("Change in cool limit") +theme_classic()
anova(extGlm, test = "Chi")
summary(extGlm)
ggplot(extData, aes(x=S, y=Ext)) + geom_point(size=0.6) +
stat_smooth(colour="firebrick",method="glm", method.args=list(family="binomial"), se=FALSE) +
labs (x= "Connectivity", y="Extinction probability" ) +
theme_classic()
ggplot(beeData, aes(x=coolLimit, y=changeCoolLimit)) +
geom_point(colour="firebrick") +
theme_minimal() +
xlab("Temperature at historical cool limit (C)") +
ylab("Recent change in temperature at cool limit (C)") +theme_classic()
ggplot(beeData, aes(x=coolLimit, y=changeCoolLimit)) +
geom_point(colour="firebrick") +
theme_minimal() +
xlab("Temperature at historical cool limit (°C)") +
ylab("Recent change in temperature at cool limit (°C)") +theme_classic()
x=c(453 ,
1283,
695 ,
1640 ,
1207 ,
2096 ,
2804 ,
3528 ,
5940 ,
10000
)
x
y=c(666,
643,
1512,
2198,
2535,
4176,
3196,
3494,
7386,
10363
)
corr(x,y)
corr.test(x,y)
cor(x,y)
cor(x,y)^2
lm(y~x)
summary(lm(y~x))
summary(lm(ln(y)~ln(x)))
summary(ln(ln(y)~ln(x)))
summary(lm(log(y)~log(x)))
cor(log(y),log(x))
cor(log(y),log(x))^2
ggplot(testesData, aes(x=NumMaleLittermates, y=MeanTestisArea_mm2)) +
geom_point() +
theme_classic() +
xlab("Number of male littermates") +
ylab("Testes area (mm^2)") +theme_classic()
testesData <- read.csv("///Users/whitlock/Desktop/ Get to Work!/Stats Book/3rd edition/new examples/testes size/testesSize.csv")
ggplot(testesData, aes(x=NumMaleLittermates, y=MeanTestisArea_mm2)) +
geom_point() +
theme_classic() +
xlab("Number of male littermates") +
ylab("Testes area (mm^2)") +theme_classic()
ggplot(testesData, aes(x=NumMaleLittermates, y=MeanTestisArea_mm2)) +
geom_point() +
theme_classic() +
xlab("Number of male littermates") +
ylab("Testes area (mm^2)") +theme_classic()
selData <- read.csv("/Users/whitlock/Desktop/Kingsolver/Kingsolveretal.csv")
summary(selData)
selDataSEs = filter(selData,!is.na(Grad.linear.StErr)||!is.na(Diff.linear.StErr))
head(selDataSEs)
length(selDataSEs$species)
length(selData$species)
sumary(selDataSEs)
summary(selDataSEs)
is.na(c(na,NA))
is.na(c("na","NA"))
is.na(c(,"na","NA"))
is.na(c(na,naA))
is.na(c(na,na))
is.na(c(NAa,NA))
is.na(c(NA,NA))
selDataSEs = filter(selData,Grad.linear.StErr!="na"||Diff.linear.StErr!="na")
length(selDataSEs$species)
selDataSEs = filter(selData,Grad.linear.StErr!="na")
length(selDataSEs$species)
selDataSEs = filter(selData,Diff.linear.StErr!="na")
length(selDataSEs$species)
selDataSEs = filter(selData,(Grad.linear.StErr!="na")||(Diff.linear.StErr!="na"))
length(selDataSEs$species)
selDataSEs = filter(selData,(Grad.linear.StErr!="na")|(Diff.linear.StErr!="na"))
length(selDataSEs$species)
summary(selData)
selDataSEs$t.Grad = selDataSEs$Grad.linear.value/selDataSEs$StErr
selDataSEs$t.Grad = selDataSEs$Grad.linear.value / selDataSEs$StErr
selDataSEs$t.Grad = as.numeric(selDataSEs$Grad.linear.value) / as.numeric(selDataSEs$StErr)
selDataSEs$Grad.linear.value
selDataSEs[selDataSEs=="na"]=NA
selDataSEs$t.Grad = as.numeric(selDataSEs$Grad.linear.value) / as.numeric(selDataSEs$StErr)
selDataSEs$Grad.linear.value
is.na(selDataSEs$Grad.linear.value)
sum(selDataSEs$Grad.linear.value )
sum(as.numeric(selDataSEs$Grad.linear.value ))
sum(as.numeric(selDataSEs$Grad.linear.value, na.rm=TRUE ))
sum(as.numeric(selDataSEs$Grad.linear.value, rm.na=TRUE ))
mean(as.numeric(selDataSEs$Grad.linear.value, rm.na=TRUE ))
as.numeric(selDataSEs$Grad.linear.value)
selData <- read.csv("/Users/whitlock/Desktop/Kingsolver/Kingsolveretal.csv",stringsAsFactors=FALSE)
summary(selData)
selData[selData=="na"]=NA
summary(selData)
selData <- read.csv("/Users/whitlock/Desktop/Kingsolver/Kingsolveretal.csv",stringsAsFactors=FALSE,na.strings="na")
summary(selData)
selDataSEs = filter(selData,(!is.na(Grad.linear.StErr)|(!is.na(Diff.linear.StErr")))
length(selDataSEs$species)
selDataSEs[selDataSEs=="na"]=NA
selDataSEs$t.Grad = as.numeric(selDataSEs$Grad.linear.value) / as.numeric(selDataSEs$StErr)
is.na(selDataSEs$Grad.linear.value)
mean(as.numeric(selDataSEs$Grad.linear.value, rm.na=TRUE ))
selDataSEs = filter(selData,(!is.na(Grad.linear.StErr))|(!is.na(Diff.linear.StErr)))
length(selDataSEs$species)
mean(selDataSEs$Grad.linear.value, rm.na=TRUE )
selDataSEs$Grad.linear.value
is.na(selDataSEs$Grad.linear.value)
mean(selDataSEs$Grad.linear.value, na.rm=TRUE )
selDataSEs$t.Grad = selDataSEs$Grad.linear.value / selDataSEs$Grad.linear.StErr
hist(selDataSEs$t.Grad)
hist(selDataSEs$t.Gradbreaks = seq(-1, 10, 1))
hist(selDataSEs$t.Grad,breaks = seq(-1, 10, 1))
hist(selDataSEs$t.Grad,breaks = seq(-1, 120, 1))
hist(selDataSEs$t.Grad,breaks = seq(-10, 130, 1))
hist(selDataSEs$t.Grad,breaks = seq(-10, 130, 0.1))
hist(selDataSEs$t.Grad,breaks = seq(-10, 130, 1))
selDataSEsTEMP = filter(selDataSEs,t.Grad<10)
hist(selDataSEsTEMP$t.Grad,breaks = seq(-10, 130, 1))
hist(selDataSEsTEMP$t.Grad,breaks = seq(-10, 10, 1))
plot(selDataSEs$t.Grad~selDataSEs$N)
plot(selDataSEsTEMP$t.Grad ~ selDataSEsTEMP$N)
filter(selDataSEs,t,Grad>100)
filter(selDataSEs,t.Grad>100)
plot(selDataSEs$t.Grad ~ selDataSEs$N)
plot(selDataSEsTEMP$t.Grad ~ selDataSEsTEMP$N)
plot(selDataSEsTEMP$Grad.linear.value ~ selDataSEsTEMP$N)
plot(selData$Grad.linear.value ~ selData$N)
plot(selData$Grad.linear.value ~ log(selData$N))
plot(selData$Grad.linear.value ~ log(selData$N))
plot(selData$Grad.linear.value ~ log(selData$N)) )
plot(selData$Grad.linear.value ~ log(selData$N))
log(selData$N)
selData$N
plot(selData$Grad.linear.value ~ log(as.numeric(selData$N)) )
selDataSEs$t.Grad = selDataSEs$Grad.linear.value / selDataSEs$Grad.linear.StErr
plot(selDataSEsTEMP$t.Grad ~ log(selDataSEsTEMP$N))
plot(selDataSEsTEMP$t.Grad ~ log(as.numeric(selDataSEsTEMP$N)))
selDataSEsTEMP = filter(selDataSEs,t.Grad<100)
plot(selDataSEsTEMP$t.Grad ~ log(as.numeric(selDataSEsTEMP$N)))
plot(selDataSEsTEMP$Grad.linear.value ~ selDataSEsTEMP$N)
selDataSEsTEMP = filter(selDataSEs,t.Grad<10)
filter(selDataSEs,t.Grad>100)
plot(selDataSEsTEMP$t.Grad ~ log(as.numeric(selDataSEsTEMP$N)), ylim=c(-8,9))
plot(selDataSEsTEMP$t.Grad ~ log(as.numeric(selDataSEsTEMP$N),10))
plot(selDataSEsTEMP$t.Grad ~ log(as.numeric(selDataSEsTEMP$N),10), ylim=c(-8,9))
plot(selDataSEsTEMP$t.Grad ~ log(as.numeric(selDataSEsTEMP$N),10))
plot(selDataSEsTEMP$t.Grad ~ log(as.numeric(selDataSEsTEMP$N),10), ylim=c(-8,9))
abline(h=2)
abline(h=-2)
tNeutral = rep(0,length(selDataSEsTEMP$N))
tNeutral
for(i in 1:length(selDataSEsTEMP$N)) tNeutral[i]=rt(df=selDataSEsTEMP$N[i]-1)
for(i in 1:length(selDataSEsTEMP$N)) tNeutral[i]=rt(n=1,df=selDataSEsTEMP$N[i]-1)
rt(df=5)
rt(n=1,df=5)
rt(n=1,df=5)
rt(n=1,df=5)
rt(n=1,df=5)
rt(df=5)
rt(n=1,df=5)
rt(n=1,df=5)
rt(n=1,df=5)
rt(n=1,df=5)
selDataSEsTEMP$N[4]
selData$N=as.numeric(selData$N)
selDataSEs = filter(selData,(!is.na(Grad.linear.StErr))|(!is.na(Diff.linear.StErr)))
plot(selData$Grad.linear.value ~ log(as.numeric(selData$N)))
selDataSEsTEMP = filter(selDataSEs,t.Grad<100)
selDataSEs$t.Grad = selDataSEs$Grad.linear.value / selDataSEs$Grad.linear.StErr
selDataSEsTEMP = filter(selDataSEs,t.Grad<10)
hist(selDataSEsTEMP$t.Grad,breaks = seq(-10, 10, 1))
selDataSEsTEMP = filter(selDataSEs,t.Grad<100)
selDataSEsTEMP = filter(selDataSEs,t.Grad<10)
for(i in 1:length(selDataSEsTEMP$N)) tNeutral[i]=rt(n=1,df=selDataSEsTEMP$N[i]-1)
tNeutral
plot(tNeutral ~ log(as.numeric(selDataSEsTEMP$N),10), ylim=c(-8,9))
plot(selDataSEsTEMP$t.Grad ~ log(as.numeric(selDataSEsTEMP$N),10), ylim=c(-8,9))
plot(abs(selDataSEsTEMP$Grad.linear.value) ~ selDataSEsTEMP$N)
plot(abs(selDataSEsTEMP$t.Grad) ~ log(as.numeric(selDataSEsTEMP$N),10), ylim=c(-8,9))
plot(abs(selDataSEsTEMP$t.Grad) ~ log(as.numeric(selDataSEsTEMP$N),10), ylim=c(0,9))
plot(abs(tNeutral) ~ log(as.numeric(selDataSEsTEMP$N),10), ylim=c(0,9))
mean(abs(selDataSEsTEMP$t.Grad))
tHalf = rep(0,length(selDataSEsTEMP$N))
for(i in 1:length(selDataSEsTEMP$N)) tNeutral[i]=rt(n=1,df=selDataSEsTEMP$N[i]-1,ncp=1.42)
tNeutral = rep(0,length(selDataSEsTEMP$N))
for(i in 1:length(selDataSEsTEMP$N)) tNeutral[i]=rt(n=1,df=selDataSEsTEMP$N[i]-1)
plot(tNeutral ~ log(as.numeric(selDataSEsTEMP$N),10), ylim=c(-8,9))
for(i in 1:length(selDataSEsTEMP$N)) tHalf[i]=rt(n=1,df=selDataSEsTEMP$N[i]-1,ncp=1.42)
plot(abs(tHalf) ~ log(as.numeric(selDataSEsTEMP$N),10), ylim=c(0,9))
plot(abs(selDataSEsTEMP$t.Grad) ~ log(as.numeric(selDataSEsTEMP$N),10), ylim=c(0,9))
temp_table_direct <- data.frame(gained=c(79,21,70),lost=c(21,59,30), row.names=c("x","y","control"))
chisq.test(temp_table_direct, correct=FALSE)
variance(c(3, 5, 6, 7, 9))
var(c(3, 5, 6, 7, 9))
sqrt(5)
var(c(-1, 2, 3, 5, 6, 9))
sqrt(12)
16/9
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek09.R', echo=TRUE)
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek10.R', echo=TRUE)
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek11.R', echo=TRUE)
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek08.R', echo=TRUE)
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek07.R', echo=TRUE)
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek06.R', echo=TRUE)
install.packages("binom", dependencies = TRUE)
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek06.R', echo=TRUE)
install.packages("fBasics")
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek05.R', echo=TRUE)
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek04.R', echo=TRUE)
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek03.R', echo=TRUE)
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek02.R', echo=TRUE)
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek02.R', echo=TRUE)
head(titanicData)
filter(titanicData, sex == "female")
titanicData$sex
filter(titanicData, sex == "female")
source('~/Desktop/ABDLabs Master file/ABDLabs/LearningTheTools/LearningToolsWeek01.R', echo=TRUE)
filter(titanicData, passenger_class =="1st")
titanicData <- read.csv("DataForLabs/titanic.csv" )
filter(titanicData, passenger_class =="1st")
library(dplyr)
filter(titanicData, sex == "female")
titanicData$sex
titanicDataFemalesOnly <- filter(titanicData, sex == "female")
titanicDataFemalesOnly
